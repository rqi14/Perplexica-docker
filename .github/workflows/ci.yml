name: Sync and Build 

on:
  schedule:
    # Runs at 00:00 UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures all branches and tags are fetched

      - name: Set up Git
        run: |
          git config --global user.name 'Your Name'
          git config --global user.email 'your-email@example.com'
          git remote add upstream https://github.com/ItzCrazyKns/Perplexica.git || true
          git fetch upstream

      - name: Check if repository is up-to-date
        id: check-up-to-date
        run: |
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse "upstream/master")
          BASE=$(git merge-base @ "upstream/master")
          if [ $LOCAL = $REMOTE ]; then
            echo "Repository is up-to-date"
            echo "REPO_SYNCED=true" >> $GITHUB_ENV
          elif [ $LOCAL = $BASE ]; then
            echo "Need to sync"
            echo "REPO_SYNCED=false" >> $GITHUB_ENV

      - name: Rebase with upstream
        if: env.REPO_SYNCED == 'false'
        run: |
          git rebase upstream/master
          if [ $? -eq 0 ]; then
            git push --force-with-lease
          else
            echo "Conflicts detected during rebase. Manual intervention required."
            exit 1

  build-and-push:
    needs: sync
    if: needs.sync.outputs.REPO_SYNCED == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: 'frontend.dockerfile'
            image_name: 'perplexica-app'
            http_probe_ports: '3000'
            expose_ports: '3000'
          - dockerfile: 'backend.dockerfile'
            image_name: 'perplexica-backend'
            http_probe_ports: '3001'
            expose_ports: '3001'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          VERSION=$(jq -r '.version' package.json)
          IMAGE_NAME=${{ matrix.image_name }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          echo "VERSION=${VERSION}"
          echo "IMAGE_NAME=${IMAGE_NAME}"
          echo "DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}"
          docker build -f ${{ matrix.dockerfile }} -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${VERSION} .

      - name: Install DockerSlim
        run: |
          curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -

      - name: Slim Docker Image
        run: |
          IMAGE_NAME=${{ matrix.image_name }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          slim build --http-probe=true --http-probe-ports=${{ matrix.http_probe_ports }} --expose ${{ matrix.expose_ports }} --include-path "/home/perplexica/node_modules/next/dist" --include-path "/home/perplexica/yarn" --include-path "/home/perplexica/node_modules/encodings" --include-bin /usr/local/bin/node --include-shell --target ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest --tag ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:slim

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Operations
        run: |
          IMAGE_NAME=${{ matrix.image_name }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          VERSION=$(jq -r '.version' package.json)
          docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
          docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${VERSION}
          docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:slim
